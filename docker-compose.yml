version: '3.8'

services:
  db:
    image: postgres:17.5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: eurovision
    volumes:
      - ./data:/data
      - ./flyway/sql:/flyway/sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d eurovision"]
      interval: 5s
      timeout: 5s
      retries: 5

  flyway:
    image: flyway/flyway
    command: -url=jdbc:postgresql://db:5432/eurovision -user=postgres -password=postgres -locations=filesystem:/flyway/sql migrate
    volumes:
      - ./flyway/sql:/flyway/sql
    depends_on:
      db:
        condition: service_healthy

  neo4j:
    container_name: neo4j
    build:
      context: ./neo4j/
      dockerfile: Dockerfile
    ports:
      - "7474:7474"
      - "7687:7687"
    depends_on:
      db:
        condition: service_healthy
      flyway:
        condition: service_started # a one-off container, so we just wait for it to have started

  graphql-api:
    build:
      context: ./graphql-api
      dockerfile: Dockerfile
    container_name: graphql-api
    ports:
      - "4000:4000"
    depends_on:
      - neo4j
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      - graphql-api

volumes:
  data: